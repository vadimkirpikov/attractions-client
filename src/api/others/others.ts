/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * TouristServer
 * OpenAPI spec version: 1.0
 */
import type {
  GetV1CategoriesParams,
  GetV1DistrictsParams,
  GetV1UsersParams
} from '.././models';


export type getV1DistrictsResponse200 = {
  data: void
  status: 200
}
    
export type getV1DistrictsResponseComposite = getV1DistrictsResponse200;
    
export type getV1DistrictsResponse = getV1DistrictsResponseComposite & {
  headers: Headers;
}

export const getGetV1DistrictsUrl = (params?: GetV1DistrictsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8080/v1/districts?${stringifiedParams}` : `http://localhost:8080/v1/districts`
}

export const getV1Districts = async (params?: GetV1DistrictsParams, options?: RequestInit): Promise<getV1DistrictsResponse> => {
  
  const res = await fetch(getGetV1DistrictsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getV1DistrictsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getV1DistrictsResponse
}


export type getV1CategoriesResponse200 = {
  data: void
  status: 200
}
    
export type getV1CategoriesResponseComposite = getV1CategoriesResponse200;
    
export type getV1CategoriesResponse = getV1CategoriesResponseComposite & {
  headers: Headers;
}

export const getGetV1CategoriesUrl = (params?: GetV1CategoriesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8080/v1/categories?${stringifiedParams}` : `http://localhost:8080/v1/categories`
}

export const getV1Categories = async (params?: GetV1CategoriesParams, options?: RequestInit): Promise<getV1CategoriesResponse> => {
  
  const res = await fetch(getGetV1CategoriesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getV1CategoriesResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getV1CategoriesResponse
}


export type getV1UsersResponse200 = {
  data: void
  status: 200
}
    
export type getV1UsersResponseComposite = getV1UsersResponse200;
    
export type getV1UsersResponse = getV1UsersResponseComposite & {
  headers: Headers;
}

export const getGetV1UsersUrl = (params?: GetV1UsersParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:8080/v1/users?${stringifiedParams}` : `http://localhost:8080/v1/users`
}

export const getV1Users = async (params?: GetV1UsersParams, options?: RequestInit): Promise<getV1UsersResponse> => {
  
  const res = await fetch(getGetV1UsersUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getV1UsersResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getV1UsersResponse
}


