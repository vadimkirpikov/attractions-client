/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * TouristServer
 * OpenAPI spec version: 1.0
 */
import type {
  LoginDto,
  RegisterDto
} from '.././models';


export type postV1AuthLoginResponse200 = {
  data: void
  status: 200
}
    
export type postV1AuthLoginResponseComposite = postV1AuthLoginResponse200;
    
export type postV1AuthLoginResponse = postV1AuthLoginResponseComposite & {
  headers: Headers;
}

export const getPostV1AuthLoginUrl = () => {


  

  return `http://localhost:8080/v1/auth/login`
}

export const postV1AuthLogin = async (loginDto: LoginDto, options?: RequestInit): Promise<postV1AuthLoginResponse> => {
  
  const res = await fetch(getPostV1AuthLoginUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      loginDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postV1AuthLoginResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postV1AuthLoginResponse
}


export type postV1AuthRegisterResponse200 = {
  data: void
  status: 200
}
    
export type postV1AuthRegisterResponseComposite = postV1AuthRegisterResponse200;
    
export type postV1AuthRegisterResponse = postV1AuthRegisterResponseComposite & {
  headers: Headers;
}

export const getPostV1AuthRegisterUrl = () => {


  

  return `http://localhost:8080/v1/auth/register`
}

export const postV1AuthRegister = async (registerDto: RegisterDto, options?: RequestInit): Promise<postV1AuthRegisterResponse> => {
  
  const res = await fetch(getPostV1AuthRegisterUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      registerDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postV1AuthRegisterResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postV1AuthRegisterResponse
}


