/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * TouristServer
 * OpenAPI spec version: 1.0
 */
import type {
  UserRouteDto
} from '.././models';


export type getV1RoutesSimpleResponse200 = {
  data: void
  status: 200
}
    
export type getV1RoutesSimpleResponseComposite = getV1RoutesSimpleResponse200;
    
export type getV1RoutesSimpleResponse = getV1RoutesSimpleResponseComposite & {
  headers: Headers;
}

export const getGetV1RoutesSimpleUrl = () => {


  

  return `http://localhost:8080/v1/routes/simple`
}

export const getV1RoutesSimple = async ( options?: RequestInit): Promise<getV1RoutesSimpleResponse> => {
  
  const res = await fetch(getGetV1RoutesSimpleUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getV1RoutesSimpleResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getV1RoutesSimpleResponse
}


export type getV1RoutesFullInfoResponse200 = {
  data: void
  status: 200
}
    
export type getV1RoutesFullInfoResponseComposite = getV1RoutesFullInfoResponse200;
    
export type getV1RoutesFullInfoResponse = getV1RoutesFullInfoResponseComposite & {
  headers: Headers;
}

export const getGetV1RoutesFullInfoUrl = () => {


  

  return `http://localhost:8080/v1/routes/fullInfo`
}

export const getV1RoutesFullInfo = async ( options?: RequestInit): Promise<getV1RoutesFullInfoResponse> => {
  
  const res = await fetch(getGetV1RoutesFullInfoUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getV1RoutesFullInfoResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getV1RoutesFullInfoResponse
}


export type postV1RoutesCreateResponse200 = {
  data: void
  status: 200
}
    
export type postV1RoutesCreateResponseComposite = postV1RoutesCreateResponse200;
    
export type postV1RoutesCreateResponse = postV1RoutesCreateResponseComposite & {
  headers: Headers;
}

export const getPostV1RoutesCreateUrl = () => {


  

  return `http://localhost:8080/v1/routes/create`
}

export const postV1RoutesCreate = async (userRouteDto: UserRouteDto, options?: RequestInit): Promise<postV1RoutesCreateResponse> => {
  
  const res = await fetch(getPostV1RoutesCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userRouteDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postV1RoutesCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postV1RoutesCreateResponse
}


export type putV1RoutesUpdateIdResponse200 = {
  data: void
  status: 200
}
    
export type putV1RoutesUpdateIdResponseComposite = putV1RoutesUpdateIdResponse200;
    
export type putV1RoutesUpdateIdResponse = putV1RoutesUpdateIdResponseComposite & {
  headers: Headers;
}

export const getPutV1RoutesUpdateIdUrl = (id: string,) => {


  

  return `http://localhost:8080/v1/routes/update/${id}`
}

export const putV1RoutesUpdateId = async (id: string,
    userRouteDto: UserRouteDto, options?: RequestInit): Promise<putV1RoutesUpdateIdResponse> => {
  
  const res = await fetch(getPutV1RoutesUpdateIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userRouteDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: putV1RoutesUpdateIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as putV1RoutesUpdateIdResponse
}


export type deleteV1RoutesDeleteIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteV1RoutesDeleteIdResponseComposite = deleteV1RoutesDeleteIdResponse200;
    
export type deleteV1RoutesDeleteIdResponse = deleteV1RoutesDeleteIdResponseComposite & {
  headers: Headers;
}

export const getDeleteV1RoutesDeleteIdUrl = (id: string,) => {


  

  return `http://localhost:8080/v1/routes/delete/${id}`
}

export const deleteV1RoutesDeleteId = async (id: string, options?: RequestInit): Promise<deleteV1RoutesDeleteIdResponse> => {
  
  const res = await fetch(getDeleteV1RoutesDeleteIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: deleteV1RoutesDeleteIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as deleteV1RoutesDeleteIdResponse
}


