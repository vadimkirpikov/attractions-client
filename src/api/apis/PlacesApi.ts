/* tslint:disable */
/* eslint-disable */
/**
 * TouristServer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FilterDto,
  Place,
  PlaceDto,
} from '../models/index';
import {
    FilterDtoFromJSON,
    FilterDtoToJSON,
    PlaceFromJSON,
    PlaceToJSON,
    PlaceDtoFromJSON,
    PlaceDtoToJSON,
} from '../models/index';

export interface V1PlacesPlaceIdGetRequest {
    placeId: string;
}

export interface V1PlacesPostRequest {
    page?: number;
    pageSize?: number;
    filterDto?: FilterDto;
}

/**
 * 
 */
export class PlacesApi extends runtime.BaseAPI {

    /**
     */
    async v1PlacesPlaceIdGetRaw(requestParameters: V1PlacesPlaceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaceDto>> {
        if (requestParameters['placeId'] == null) {
            throw new runtime.RequiredError(
                'placeId',
                'Required parameter "placeId" was null or undefined when calling v1PlacesPlaceIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/places/{placeId}`.replace(`{${"placeId"}}`, encodeURIComponent(String(requestParameters['placeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaceDtoFromJSON(jsonValue));
    }

    /**
     */
    async v1PlacesPlaceIdGet(requestParameters: V1PlacesPlaceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaceDto> {
        const response = await this.v1PlacesPlaceIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1PlacesPostRaw(requestParameters: V1PlacesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Place>>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/places`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FilterDtoToJSON(requestParameters['filterDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaceFromJSON));
    }

    /**
     */
    async v1PlacesPost(requestParameters: V1PlacesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Place>> {
        const response = await this.v1PlacesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
