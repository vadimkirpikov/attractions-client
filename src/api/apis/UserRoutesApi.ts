/* tslint:disable */
/* eslint-disable */
/**
 * TouristServer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserRoute,
  UserRouteDto,
  UserRouteDtoReq,
} from '../models/index';
import {
    UserRouteFromJSON,
    UserRouteToJSON,
    UserRouteDtoFromJSON,
    UserRouteDtoToJSON,
    UserRouteDtoReqFromJSON,
    UserRouteDtoReqToJSON,
} from '../models/index';

export interface V1RoutesFullInfoIdGetRequest {
    id: string;
}

export interface V1RoutesIdDeleteRequest {
    id: string;
}

export interface V1RoutesIdPutRequest {
    id: string;
    userRouteDtoReq?: UserRouteDtoReq;
}

export interface V1RoutesPostRequest {
    userRouteDtoReq?: UserRouteDtoReq;
}

/**
 * 
 */
export class UserRoutesApi extends runtime.BaseAPI {

    /**
     */
    async v1RoutesFullInfoIdGetRaw(requestParameters: V1RoutesFullInfoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRouteDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v1RoutesFullInfoIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/routes/fullInfo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRouteDtoFromJSON(jsonValue));
    }

    /**
     */
    async v1RoutesFullInfoIdGet(requestParameters: V1RoutesFullInfoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRouteDto> {
        const response = await this.v1RoutesFullInfoIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1RoutesIdDeleteRaw(requestParameters: V1RoutesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v1RoutesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/routes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1RoutesIdDelete(requestParameters: V1RoutesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1RoutesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1RoutesIdPutRaw(requestParameters: V1RoutesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v1RoutesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/routes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserRouteDtoReqToJSON(requestParameters['userRouteDtoReq']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1RoutesIdPut(requestParameters: V1RoutesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1RoutesIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1RoutesPostRaw(requestParameters: V1RoutesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/routes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRouteDtoReqToJSON(requestParameters['userRouteDtoReq']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v1RoutesPost(requestParameters: V1RoutesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1RoutesPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v1RoutesSimpleInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserRoute>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/routes/simpleInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserRouteFromJSON));
    }

    /**
     */
    async v1RoutesSimpleInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserRoute>> {
        const response = await this.v1RoutesSimpleInfoGetRaw(initOverrides);
        return await response.value();
    }

}
