/* tslint:disable */
/* eslint-disable */
/**
 * TouristServer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';
import type { RoutePlace } from './RoutePlace';
import {
    RoutePlaceFromJSON,
    RoutePlaceFromJSONTyped,
    RoutePlaceToJSON,
} from './RoutePlace';

/**
 * 
 * @export
 * @interface UserRoute
 */
export interface UserRoute {
    /**
     * 
     * @type {string}
     * @memberof UserRoute
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoute
     */
    name?: string | null;
    /**
     * 
     * @type {Array<RoutePlace>}
     * @memberof UserRoute
     */
    routePlaces?: Array<RoutePlace> | null;
    /**
     * 
     * @type {string}
     * @memberof UserRoute
     */
    userId?: string;
    /**
     * 
     * @type {User}
     * @memberof UserRoute
     */
    user?: User;
}

/**
 * Check if a given object implements the UserRoute interface.
 */
export function instanceOfUserRoute(value: object): value is UserRoute {
    return true;
}

export function UserRouteFromJSON(json: any): UserRoute {
    return UserRouteFromJSONTyped(json, false);
}

export function UserRouteFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserRoute {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'routePlaces': json['routePlaces'] == null ? undefined : ((json['routePlaces'] as Array<any>).map(RoutePlaceFromJSON)),
        'userId': json['userId'] == null ? undefined : json['userId'],
        'user': json['user'] == null ? undefined : UserFromJSON(json['user']),
    };
}

export function UserRouteToJSON(value?: UserRoute | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'routePlaces': value['routePlaces'] == null ? undefined : ((value['routePlaces'] as Array<any>).map(RoutePlaceToJSON)),
        'userId': value['userId'],
        'user': UserToJSON(value['user']),
    };
}

