/* tslint:disable */
/* eslint-disable */
/**
 * TouristServer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Category } from './Category';
import {
    CategoryFromJSON,
    CategoryFromJSONTyped,
    CategoryToJSON,
} from './Category';
import type { Photo } from './Photo';
import {
    PhotoFromJSON,
    PhotoFromJSONTyped,
    PhotoToJSON,
} from './Photo';
import type { RoutePlace } from './RoutePlace';
import {
    RoutePlaceFromJSON,
    RoutePlaceFromJSONTyped,
    RoutePlaceToJSON,
} from './RoutePlace';
import type { District } from './District';
import {
    DistrictFromJSON,
    DistrictFromJSONTyped,
    DistrictToJSON,
} from './District';

/**
 * 
 * @export
 * @interface Place
 */
export interface Place {
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    categoryId?: string;
    /**
     * 
     * @type {Category}
     * @memberof Place
     */
    category?: Category;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Place
     */
    cost?: number;
    /**
     * 
     * @type {number}
     * @memberof Place
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof Place
     */
    longitude?: number;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    description?: string | null;
    /**
     * 
     * @type {Array<Photo>}
     * @memberof Place
     */
    photos?: Array<Photo> | null;
    /**
     * 
     * @type {Array<RoutePlace>}
     * @memberof Place
     */
    routePlaces?: Array<RoutePlace> | null;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    districtId?: string;
    /**
     * 
     * @type {District}
     * @memberof Place
     */
    district?: District;
}

/**
 * Check if a given object implements the Place interface.
 */
export function instanceOfPlace(value: object): value is Place {
    return true;
}

export function PlaceFromJSON(json: any): Place {
    return PlaceFromJSONTyped(json, false);
}

export function PlaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Place {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'categoryId': json['categoryId'] == null ? undefined : json['categoryId'],
        'category': json['category'] == null ? undefined : CategoryFromJSON(json['category']),
        'name': json['name'] == null ? undefined : json['name'],
        'cost': json['cost'] == null ? undefined : json['cost'],
        'latitude': json['latitude'] == null ? undefined : json['latitude'],
        'longitude': json['longitude'] == null ? undefined : json['longitude'],
        'description': json['description'] == null ? undefined : json['description'],
        'photos': json['photos'] == null ? undefined : ((json['photos'] as Array<any>).map(PhotoFromJSON)),
        'routePlaces': json['routePlaces'] == null ? undefined : ((json['routePlaces'] as Array<any>).map(RoutePlaceFromJSON)),
        'districtId': json['districtId'] == null ? undefined : json['districtId'],
        'district': json['district'] == null ? undefined : DistrictFromJSON(json['district']),
    };
}

export function PlaceToJSON(value?: Place | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'categoryId': value['categoryId'],
        'category': CategoryToJSON(value['category']),
        'name': value['name'],
        'cost': value['cost'],
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'description': value['description'],
        'photos': value['photos'] == null ? undefined : ((value['photos'] as Array<any>).map(PhotoToJSON)),
        'routePlaces': value['routePlaces'] == null ? undefined : ((value['routePlaces'] as Array<any>).map(RoutePlaceToJSON)),
        'districtId': value['districtId'],
        'district': DistrictToJSON(value['district']),
    };
}

